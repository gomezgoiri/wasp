// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

#![allow(dead_code)]

use crate::*;
use crate::coreroot::*;

pub struct DeployContractCall {
    pub func:   ScFunc,
    pub params: MutableDeployContractParams,
}

pub struct GrantDeployPermissionCall {
    pub func:   ScFunc,
    pub params: MutableGrantDeployPermissionParams,
}

pub struct RequireDeployPermissionsCall {
    pub func:   ScFunc,
    pub params: MutableRequireDeployPermissionsParams,
}

pub struct RevokeDeployPermissionCall {
    pub func:   ScFunc,
    pub params: MutableRevokeDeployPermissionParams,
}

pub struct SubscribeBlockContextCall {
    pub func:   ScFunc,
    pub params: MutableSubscribeBlockContextParams,
}

pub struct FindContractCall {
    pub func:    ScView,
    pub params:  MutableFindContractParams,
    pub results: ImmutableFindContractResults,
}

pub struct GetContractRecordsCall {
    pub func:    ScView,
    pub results: ImmutableGetContractRecordsResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn deploy_contract(ctx: &impl ScFuncCallContext) -> DeployContractCall {
        let mut f = DeployContractCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_DEPLOY_CONTRACT),
            params:  MutableDeployContractParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn grant_deploy_permission(ctx: &impl ScFuncCallContext) -> GrantDeployPermissionCall {
        let mut f = GrantDeployPermissionCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_GRANT_DEPLOY_PERMISSION),
            params:  MutableGrantDeployPermissionParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn require_deploy_permissions(ctx: &impl ScFuncCallContext) -> RequireDeployPermissionsCall {
        let mut f = RequireDeployPermissionsCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_REQUIRE_DEPLOY_PERMISSIONS),
            params:  MutableRequireDeployPermissionsParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn revoke_deploy_permission(ctx: &impl ScFuncCallContext) -> RevokeDeployPermissionCall {
        let mut f = RevokeDeployPermissionCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_REVOKE_DEPLOY_PERMISSION),
            params:  MutableRevokeDeployPermissionParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn subscribe_block_context(ctx: &impl ScFuncCallContext) -> SubscribeBlockContextCall {
        let mut f = SubscribeBlockContextCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_SUBSCRIBE_BLOCK_CONTEXT),
            params:  MutableSubscribeBlockContextParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn find_contract(ctx: &impl ScViewCallContext) -> FindContractCall {
        let mut f = FindContractCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_FIND_CONTRACT),
            params:  MutableFindContractParams { proxy: Proxy::nil() },
            results: ImmutableFindContractResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_contract_records(ctx: &impl ScViewCallContext) -> GetContractRecordsCall {
        let mut f = GetContractRecordsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_CONTRACT_RECORDS),
            results: ImmutableGetContractRecordsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}
